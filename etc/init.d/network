#!/bin/sh
#
# network       Bring up/down networking
#
# chkconfig: 2345 10 90
# description: Activates/Deactivates all network interfaces configured to \
#              start at boot time.
#
### BEGIN INIT INFO
# Provides: $network
### END INIT INFO

# Source function library.
. /etc/init.d/functions

if [ ! -f /etc/sysconfig/network ]; then
	echo "no network config file found"
    exit 0
fi

. /etc/sysconfig/network


# Check that networking is up.
[ "${NETWORKING}" = "no" ] && exit 0

# if the ip configuration utility isn't around we can't function.
[ -x /bin/ip ] || exit 1

CWD=`pwd`
cd /etc/sysconfig/network-scripts

. ./network-functions

# find all the interfaces besides loopback.
# ignore aliases, alternative configurations, and editor backup files
#interfaces=$(cat /etc/network/interfaces | awk '!/^#/' | awk '/^iface/ {print $2}' | \
#            LANG=C sed -e "$_sed_discard_ignored_files" \
#                       -e '/\(lo\|:\|*-range\)/d' \
#                       -e '/[A-Za-z0-9\._-]\+$/ { s/^//g;s/[0-9]/ &/}' | \
#            LANG=C sort -k 1,1 -k 2n | \
#            LANG=C sed 's/ //')
interfaces=$(ls ifcfg* | \
	    LANG=C sed -e "$__sed_discard_ignored_files" \
		       -e '/\(ifcfg-lo\|:\|ifcfg-.*-range\)/d' \
		       -e '/ifcfg-[A-Za-z0-9\._-]\+$/ { s/^ifcfg-//g;s/[0-9]/ &/}' | \
	    LANG=C sort -k 1,1 -k 2n | \
	    LANG=C sed 's/ //')

# Sync the ifstate table with the device statement
sync_ifstate lo
for i in $interfaces; do
    sync_ifstate $i
done

# See how we were called.
case "$1" in
  start)
#	# IPv6 hook (pre IPv4 start)
#	if [ "$NETWORKING_IPV6" = "yes" ]; then
#		if [ -x /etc/sysconfig/network-scripts/init.ipv6-global ]; then
#			/etc/sysconfig/network-scripts/init.ipv6-global start pre
#		fi
#	fi
  
	sysctl -e -p /etc/sysctl.conf >/dev/null 2>&1

	# bring up loopback interface
	if check_device_down lo; then
		action "Bringing up loopback interface: " /sbin/ifup -i ifcfg-lo -f lo
	fi

	case "$IPX" in
	  yes|true)
	    /sbin/ipx_configure --auto_primary=$IPXAUTOPRIMARY \
				   --auto_interface=$IPXAUTOFRAME
	    if [ "$IPXINTERNALNETNUM" != "0" ]; then
	       /sbin/ipx_internal_net add $IPXINTERNALNETNUM $IPXINTERNALNODENUM
	    fi
	    ;;
	esac

	case "$VLAN" in
	  yes)
	    if [ -d /proc/net/vlan ] || modprobe 8021q >/dev/null 2>&1 ; then
		test -z "$VLAN_NAME_TYPE" && VLAN_NAME_TYPE=DEV_PLUS_VID_NO_PAD
		action "Setting 802.1Q VLAN parameters: " /sbin/vconfig set_name_type "$VLAN_NAME_TYPE"
	    else
		echo "No 802.1Q VLAN support available in kernel."
	    fi
	    ;;
	esac

	vlaninterfaces=""
	cipeinterfaces=""
	xdslinterfaces=""
	bridgeinterfaces=""

	# bring up all other interfaces configured to come up at boot time
	for i in $interfaces; do
#		unset DEVICE TYPE SLAVE
#		eval $(LANG=C fgrep "DEVICE=" ifcfg-$i)
#		eval $(LANG=C fgrep "TYPE=" ifcfg-$i)
#		eval $(LANG=C fgrep "SLAVE=" ifcfg-$i)
#
#		if [ -z "$DEVICE" ] ; then DEVICE="$i"; fi
#
#		if [ "${DEVICE##cipcb}" != "$DEVICE" ] ; then
#			cipeinterfaces="$cipeinterfaces $i"
#			continue
#		fi
#		if [ "$TYPE" = "xDSL" ]; then
#		        xdslinterfaces="$xdslinterfaces $i"
#			continue
#		fi
#
#		if [ "$TYPE" = "Bridge" ]; then
#		        bridgeinterfaces="$bridgeinterfaces $i"
#			continue
#		fi
#
#		if [ "${DEVICE%%.*}" != "$DEVICE" ] ; then
#			vlaninterfaces="$vlaninterfaces $i"
#			continue
#		fi
#		
#		if [ "$SLAVE" = "yes" ]; then
#			continue
#		fi
#
#		if LANG=C egrep -L "^ONBOOT=['\"]?[Nn][Oo]['\"]?" ifcfg-$i > /dev/null ; then
#		        # this loads the module, to preserve ordering
#			is_available $i
#			continue
#		fi
#		# If we're in confirmation mode, get user confirmation.
#		if [ -f /var/run/confirm ]; then
#			confirm $i
#			test $? = 1 && continue
#		fi
		if check_device_down $i; then
			action "Bringing up interface $i: " /sbin/ifup -i ifcfg-$i -f $i boot
		fi
	done
	
#	# Bring up xDSL and CIPE interfaces
#	for i in $vlaninterfaces $bridgeinterfaces $xdslinterfaces $cipeinterfaces ; do 
#            if ! LANG=C egrep -L "^ONBOOT=['\"]?[Nn][Oo]['\"]?" ifcfg-$i >/dev/null 2>&1 ; then
#		# If we're in confirmation mode, get user confirmation.
#		if [ -f /var/run/confirm ]; then
#			confirm $i
#			test $? = 1 && continue
#		fi
#		action "Bringing up interface $i: " /sbin/ifup $i boot
#	    fi
#        done
#
#	# Add non interface-specific static-routes.
#	if [ -f /etc/sysconfig/static-routes ]; then
#	   grep "^any" /etc/sysconfig/static-routes | while read ignore args ; do
#              /sbin/route add -$args
#	   done
#	fi    
#
# 	# IPv6 hook (post IPv4 start)
# 	if [ "$NETWORKING_IPV6" = "yes" ]; then
# 		if [ -x /etc/sysconfig/network-scripts/init.ipv6-global ]; then
# 			/etc/sysconfig/network-scripts/init.ipv6-global start post
# 		fi
# 	fi
	# Run this again to catch any interface-specific actions
	sysctl -e -p /etc/sysctl.conf >/dev/null 2>&1
 
        touch /var/lock/subsys/network

	[ -n "${NETWORKDELAY}" ] && /bin/sleep ${NETWORKDELAY}
	[ -n "${HOSTNAME}" ] && set_hostname ${HOSTNAME}
        ;;
  stop)
  	# Don't shut the network down if root is on NFS or a network
	# block device.
        rootfs=$(awk '{ if ($1 !~ /^[ \t]*#/ && $2 == "/") { print $3; }}' /etc/mtab)
        rootopts=$(awk '{ if ($1 !~ /^[ \t]*#/ && $2 == "/") { print $4; }}' /etc/mtab)
	
	if [[ "$rootfs" = "^nfs" ]] || [[ "$rootopts" = "_netdev" ]] ; then
	    echo "WARNING: rootfs on network!"
	    exit 1
	fi
  
  	# If this is a final shutdown/halt, check for network FS,
	# and unmount them even if the user didn't turn on netfs
	if [ "$RUNLEVEL" = "6" -o "$RUNLEVEL" = "0" -o "$RUNLEVEL" = "1" ]; then
		NFSMTAB=`LC_ALL=C awk '$3  ~ /^nfs/ { print $2 }' /proc/mounts`
		SMBMTAB=`LC_ALL=C awk '$3 == "smbfs" { print $2 }' /proc/mounts`
		NCPMTAB=`LC_ALL=C awk '$3 == "ncpfs" { print $2 }' /proc/mounts`
		if [ -n "$NFSMTAB" -o -n "$SMBMTAB" -o -n "$NCPMTAB" ] ; then
			/etc/init.d/netfs stop
		fi
	fi
	
# 	# IPv6 hook (pre IPv4 stop)
# 	if [ "$NETWORKING_IPV6" = "yes" ]; then
# 		if [ -x /etc/sysconfig/network-scripts/init.ipv6-global ]; then
# 			/etc/sysconfig/network-scripts/init.ipv6-global stop pre
# 		fi
# 	fi
# 
	vlaninterfaces=""
	cipeinterfaces=""
	xdslinterfaces=""
	bridgeinterfaces=""
	remaining=""

	# get list of bonding, cipe, and xdsl interfaces
	for i in $interfaces; do
		unset DEVICE TYPE
#		eval $(LANG=C fgrep "DEVICE=" ifcfg-$i)
#		eval $(LANG=C fgrep "TYPE=" ifcfg-$i)
#
#		if [ -z "$DEVICE" ] ; then DEVICE="$i"; fi
#
#		if [ "${DEVICE##cipcb}" != "$DEVICE" ] ; then
#			cipeinterfaces="$cipeinterfaces $i"
#			continue
#		fi
#		if [ "$TYPE" = "Bridge" ]; then
#		        bridgeinterfaces="$bridgeinterfaces $i"
#		        continue
#		fi
#		if [ "$TYPE" = "xDSL" ]; then
#		        xdslinterfaces="$xdslinterfaces $i"
#			continue
#		fi
#
#		if [ "${DEVICE%%.*}" != "$DEVICE" ] ; then
#			vlaninterfaces="$vlaninterfaces $i"
#			continue
#		fi
		remaining="$remaining $i"
	done
	
	for i in $cipeinterfaces $xdslinterfaces $bridgeinterfaces $vlaninterfaces $remaining; do
#		(. ifcfg-$i
		(
		if [ -z "$DEVICE" ] ; then DEVICE="$i"; fi

		if ! check_device_down $DEVICE; then
		   action "Shutting down interface $i: " /sbin/ifdown -i ifcfg-$i $i boot
		fi
		)
	done

#	case "$IPX" in
#	  yes|true)
#	    if [ "$IPXINTERNALNETNUM" != "0" ]; then
#	       /sbin/ipx_internal_net del
#	    fi
#	    ;;
#	esac

	if ! check_device_down lo; then
	    action "Shutting down loopback interface: " /sbin/ifdown -i ifcfg-lo lo
	fi

	if [ -d /proc/sys/net/ipv4 ]; then
	  if [ -f /proc/sys/net/ipv4/ip_forward ]; then
		if [ `cat /proc/sys/net/ipv4/ip_forward` != 0 ]; then
			action "Disabling IPv4 packet forwarding: " sysctl -w net.ipv4.ip_forward=0
		fi
	  fi
	  if [ -f /proc/sys/net/ipv4/ip_always_defrag ]; then
	        if [ `cat /proc/sys/net/ipv4/ip_always_defrag` != 0 ]; then
		        action "Disabling IPv4 automatic defragmentation: " sysctl -w net.ipv4.ip_always_defrag=0
		fi
	  fi
	fi

#	# IPv6 hook (post IPv4 stop)
#	if [ "$NETWORKING_IPV6" = "yes" ]; then
#		if [ -x /etc/sysconfig/network-scripts/init.ipv6-global ]; then
#			/etc/sysconfig/network-scripts/init.ipv6-global stop post
#		fi
#	fi
	
        rm -f /var/lock/subsys/network
        ;;
  status)
	echo "Configured devices:"
	echo lo $interfaces

	echo "Currently active devices:"
	echo $(/bin/ip -o link show up | awk -F ": " '{ print $2 }')
	;;
  restart|reload)
        cd "$CWD"
	$0 stop
	$0 start
	;;
  *)
        echo "Usage: $0 {start|stop|restart|reload|status}"
        exit 1
esac

exit 0
